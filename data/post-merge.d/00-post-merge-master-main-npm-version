#!/bin/sh

LC_ALL=C

cache_file=$(git rev-parse --show-toplevel)/.git/.cgh.variables
eval "$(./$cache_file)"

if [ "$CGH_BRANCH_NAME_CURRENT" = "master" ] || [ "$CGH_BRANCH_NAME_CURRENT" = "main" ]; then
    reflog_message=$(git reflog -1)
    merged_branch_name=$(echo $reflog_message | cut -d" " -f 4 | sed "s/://")
    if [ -z $merged_branch_name  ] || [ "$merged_branch_name" = "" ] || [ "$merged_branch_name" = "master" ]  || [ "$merged_branch_name" = "main" ]; then
        echo "Master / main merged into master / main."
    else
        if [ -f "$CGH_PACKAGE_JSON_FILE" ]; then
            version_string=$(echo $merged_branch_name | grep -i '\-version\-\(major\|minor\|patch\|fix\)$' -o | tr '[:upper:]' '[:lower:]')
            if [ -z $version_string  ] || [ "$version_string" = "" ]; then
                echo "No version bump rule in branch name ${merged_branch_name}."
            else
                node -e "let pkg=require('${CGH_PACKAGE_JSON_FILE}'); pkg.version='${CGH_BRANCH_VERSION_CURRENT}'; require('fs').writeFileSync('${CGH_PACKAGE_JSON_FILE}', JSON.stringify(pkg, null, 2));"
                if [ "$version_string" = "-version-major" ]; then
                    npm version major -m "Releasing version %s"
                elif [ "$version_string" = "-version-minor" ]; then
                    npm version minor -m "Releasing version %s"
                else
                    npm version patch -m "Releasing version %s"
                fi
                git push --tags
                echo "Version bump released."
            fi
        else
            echo "No package.json available, version bump skipped."
        fi
    fi
else
    echo "No version bump, unless merged into  / main."
fi
exit 0